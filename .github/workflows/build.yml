name: Build and Package Java App

env:
  TAG_NAME: release-${{ github.run_id }} #Comme un " #define" en C

on:
  push:
    branches:
      - main
    # Cette condition permet de cibler des messages de commit spécifiques
    # Ici, on ne déclenche le workflow que pour des commits contenant "[build]" dans le message
    commit_message: '.*\[build\].*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Package with jpackage
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot libfuse2
          jpackage \
            --type deb \
            --input target \
            --dest dist \
            --name TravauxApp \
            --main-jar TravauxApp-1.0.jar \
            --main-class org.example.Main \
            --icon icon.jpeg

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: MonApp-linux
          path: dist/*.deb

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Resolve Maven dependencies
        run: mvn dependency:resolve

      - name: Build JAR with Maven
        run: mvn clean package

      - name: Verify JavaFX dependencies
        run: |
          ls -l $env:USERPROFILE\.m2\repository\org\openjfx\javafx-base\17.0.15\
          ls -l $env:USERPROFILE\.m2\repository\org\openjfx\javafx-controls\17.0.15\
          ls -l $env:USERPROFILE\.m2\repository\org\openjfx\javafx-fxml\17.0.15\
          ls -l $env:USERPROFILE\.m2\repository\org\openjfx\javafx-graphics\17.0.15\
        shell: pwsh

      - name: Create Runtime Image with jlink
        run: |
          # Créer un dossier pour les JAR JavaFX
          mkdir javafx-jars
          cp $env:USERPROFILE\.m2\repository\org\openjfx\javafx-base\17.0.15\javafx-base-17.0.15-win.jar javafx-jars/
          cp $env:USERPROFILE\.m2\repository\org\openjfx\javafx-controls\17.0.15\javafx-controls-17.0.15-win.jar javafx-jars/
          cp $env:USERPROFILE\.m2\repository\org\openjfx\javafx-fxml\17.0.15\javafx-fxml-17.0.15-win.jar javafx-jars/
          cp $env:USERPROFILE\.m2\repository\org\openjfx\javafx-graphics\17.0.15\javafx-graphics-17.0.15-win.jar javafx-jars/
          # Exécuter jlink
          jlink `
            --module-path "javafx-jars;$env:JAVA_HOME\jmods" `
            --add-modules java.base,javafx.base,javafx.controls,javafx.fxml,javafx.graphics `
            --compress 2 `
            --no-header-files `
            --no-man-pages `
            --strip-debug `
            --output runtime
        shell: pwsh

      - name: Build Windows executable with jpackage
        run: |
          jpackage `
            --type msi `
            --input target `
            --dest dist `
            --name Kifékoi? `
            --main-jar TravauxApp-1.0.jar `
            --main-class org.example.Main `
            --icon icon.ico `
            --runtime-image runtime `
            --win-shortcut `
            --win-dir-chooser
        shell: pwsh

      - name: Verify MSI file
        run: |
          ls -l dist/
          if (-Not (Test-Path dist/TravauxApp-1.0.msi)) { Write-Error "TravauxApp-1.0.msi not found"; exit 1 }
        shell: pwsh

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: MonApp-windows
          path: dist/TravauxApp-1.0.msi


  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: MonApp-linux
          path: dist

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: MonApp-windows
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

